const os = require('os');
let menus = false;
const moment = require("moment-timezone");
const fs = require("fs");
const Config = require('../config');
let { fancytext, tlang, tiny, bot_, alive, runtime, formatp, smsg, getAdmin, send, react, botpic, sleep, getBuffer, prefix, sck1, smd, sck, getTime, formatDate, groupdb, smdJson, smdBuffer, isAdmin } = require("../lib");
const long = String.fromCharCode(8206);
const readmore = long.repeat(4001);
const s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö = require('../lib/plugins');
const { Sticker, createSticker, StickerTypes } = require("wa-sticker-formatter");
const axios = require('axios');
const fetch = require("node-fetch");
const util = require("util");
const events = s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö;
const { commands } = require('../lib');
const { exec } = require("child_process");
const translatte = require("translatte");
const cheerio = require('cheerio');
const path = require('path');
const cron = require('node-cron');
var cronStart = false;

// Help Command
smd({
  'cmdname': "help",
  'alias': ['categories', "ctgry", "category"],
  'desc': "category list",
  'category': "general"
}, async (message, match) => {
  try {
    if (match.split(" ")[0]) {
      let helpText = [];
      const cmd = commands.find(c => c.pattern === match.split(" ")[0].toLowerCase());
      
      if (cmd) {
        helpText.push("*üçÅCommand:* " + cmd.pattern);
        if (cmd.category) helpText.push("*üß©Category:* " + cmd.category);
        if (cmd.alias && cmd.alias[0]) helpText.push("*üß©Alias:* " + cmd.alias.join(", "));
        if (cmd.desc) helpText.push("*üß©Description:* " + cmd.desc);
        if (cmd.use) helpText.push("*„ÄΩÔ∏èUsage:*\n ```" + prefix + cmd.pattern + " " + cmd.use + "```");
        
        await message.reply(helpText.join("\n"));
      }
    }

    const cmdCategories = {};
    commands.forEach(cmd => {
      if (!cmd.dontAddCommandList && cmd.pattern !== undefined) {
        if (!cmdCategories[cmd.category]) cmdCategories[cmd.category] = [];
        cmdCategories[cmd.category].push(cmd.pattern);
      }
    });

    let randomNum = Math.round(Math.random());
    let menuType = randomNum === 0 ? "MENU" : "COMMANDS";
    let helpMenu = "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚îÉ\t *SUHAIL-MD_" + menuType + "_LIST* \n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\t```Reply the number you wants to select```\n\n";
    
    let sectionNum = 1;
    let itemNum = 0;
    
    for (const category in cmdCategories) {
      itemNum += 1;
      if (match.toLowerCase() == category.toLowerCase()) {
        helpMenu = "‚îè‚îÅ‚îÅ‚ü™ *" + category.toUpperCase() + "* ‚ü´‚îÅ‚îÅ‚¶ø\n\n";
        cmdCategories[category].forEach(cmd => {
          helpMenu += "‚îÉ ‚úó " + fancytext(cmd, 1) + "\n";
        });
        helpMenu += "\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶ø";
        break;
      }
      
      if (itemNum >= 10) {
        sectionNum += 1;
        itemNum = 0;
      }
      helpMenu += "\n*" + sectionNum + '.' + itemNum + " |" + category.toUpperCase() + " " + menuType + "*\n";
    }

    helpMenu += "\n\n" + Config.caption;
    return await message.sendUi(message.jid, { 'caption': helpMenu });
  } catch (error) {
    await message.error(error + "\nCommand:help", error);
  }
});

// Menus Command
smd({
  'pattern': "menus",
  'type': "MENU list",
  'info': "general",
  'dontAddCommandList': true
}, async (message) => {
  try {
    let menuText = `
*ü¶Ñ ·¥ú·¥ò ·¥õ…™·¥ç·¥á :* ${runtime(process.uptime())}
*üçÅ ·¥õ·¥è·¥Ö·¥Ä è …™s :* ${message.date}
*üéó …¥·¥è·¥° ·¥õ…™·¥ç·¥á :* ${message.time}

‚ûÆF·¥è·¥ú…¥·¥Ö·¥á Ä- SuhailTechInfoùõÅ
‚ûÆO·¥°…¥·¥á Ä - ${Config.ownername}
‚ûÆN·¥ú·¥ç - ${owner.split(',')[0]}
‚ûÆM·¥á·¥ç·¥è - ${formatp(os.totalmem() - os.freemem())}/${formatp(os.totalmem())}

*üßë‚Äçüíª :* S·¥ú ú·¥Ä…™ ü-M·¥ú ü·¥õ…™·¥Ö·¥á·¥†…™·¥Ñ·¥á …™Íú± …¥·¥è·¥° A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á
${readmore}

‚ï≠‚îÄ‚îÄ‚ù∞ *ALL MENU* ‚ù±
‚îÇüèÆ L…™Íú±·¥õ
‚îÇüèÆ C·¥Ä·¥õ·¥á…¢·¥è Ä è
‚îÇüèÆ H·¥á ü·¥ò
‚îÇüèÆ A ü…™·¥†·¥á
‚îÇüèÆ U·¥ò·¥õ…™·¥ç·¥á
‚îÇüèÆ W·¥á·¥Ä·¥õ ú·¥á Ä
‚îÇüèÆ L…™…¥·¥ã
‚îÇüèÆ C·¥ò·¥ú
‚îÇüèÆ R·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¶Å`.trim();

    return await message.bot.sendUi(message.from, { 'caption': menuText });
  } catch (error) {
    await message.error(error + "\nCommand:menus", error);
  }
});

// Set Command Alias
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "setcmd",
  'desc': "To set command alias",
  'category': "general",
  'fromMe': true,
  'filename': __filename
}, async (message, match, { Void }) => {
  try {
    if (!match) return await message.send("*_Please provide cmd name by replying a Sticker_*");
    
    let parts = match.split(',');
    var newCmd;
    var existingCmd;
    let isSticker = false;
    
    if (message.quoted) {
      let quotedType = message.quoted.mtype;
      if (quotedType == "stickerMessage" && match) {
        isSticker = true;
        existingCmd = match.split(" ")[0];
        newCmd = 'sticker-' + message.quoted.msg.fileSha256;
      }
    }
    
    if (!isSticker && parts.length > 1) {
      newCmd = parts[0].trim().toLowerCase();
      existingCmd = parts[1].trim().toLowerCase();
    } else if (!isSticker) {
      return await message.send("*_Uhh Dear, Give Cmd With New Name_*\n*Eg: _.setcmd New_Name, Cmd_Name_*");
    }
    
    if (newCmd.length < 1) return await message.reply("*_Uhh Please, Provide New_Cmd Name First_*");
    
    if (global.setCmdAlias[newCmd]) {
      return await message.send(`*_"${isSticker ? "Given Sticker" : newCmd}" Already set for "${global.setCmdAlias[newCmd]}" Cmd, Please try another ${isSticker ? 'Sticker' : "Name"}_*`);
    }
    
    const cmdObj = s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.commands.find(c => c.pattern === existingCmd) || 
                  s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.commands.find(c => c.alias && c.alias.includes(existingCmd));
    
    if (cmdObj) {
      global.setCmdAlias[newCmd] = cmdObj.pattern;
      return await message.send(`*_Cmd "${global.setCmdAlias[newCmd]}" Succesfully set to "${isSticker ? "Sticker" : newCmd}"._*\n*_These all names are reset, If bot restart_*`);
    } else {
      return await message.send(`*_Provided Cmd(${existingCmd}) not found in bot cmds. Please Provide Valid cmd Name_*`);
    }
  } catch (error) {
    await message.error(error + "\nCommand:setcmd", error);
  }
});

// Delete Command Alias
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "delcmd",
  'desc': "To delete command alias",
  'category': 'general',
  'fromMe': true,
  'filename': __filename
}, async (message, match, { Void }) => {
  try {
    let cmdName = match ? match.split(" ")[0].trim().toLowerCase() : '';
    let isSticker = false;
    
    if (message.quoted) {
      if (message.quoted.mtype == "stickerMessage") {
        isSticker = true;
        cmdName = "sticker-" + message.quoted.msg.fileSha256;
      } else if (!match) {
        return await message.send("*_Please reply to a Sticker that set for a Cmd_*");
      }
    } else if (!match) {
      return await message.send("*_Uhh Dear, provide Name that set to a cmd_*\n*Eg: _.delcmd Cmd_Name_*");
    }
    
    if (global.setCmdAlias[cmdName]) {
      await message.send(`*_"${isSticker ? "Given Sticker" : cmdName}" deleted Succesfully at "${global.setCmdAlias[cmdName]}" cmd_*`);
      delete global.setCmdAlias[cmdName];
      return;
    } else {
      return await message.send(`*_"${isSticker ? "Given Sticker" : cmdName}" not Set for any cmd._*\n *_Please Provide Valid ${isSticker ? "Sticker" : "cmd Name"} to delete_*`);
    }
  } catch (error) {
    await message.error(error + "\nCommand:delcmd", error);
  }
});

// Ping Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.smd({
  'pattern': "ping",
  'desc': "To check ping",
  'category': "general",
  'filename': __filename
}, async (message) => {
  var startTime = new Date().getTime();
  const { key } = await message.reply("*Testing Ping!!!*");
  var endTime = new Date().getTime();
  return await message.send("*Pong*\n *" + (endTime - startTime) + " ms* ", { 'edit': key }, '', message);
});

// Uptime Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "uptime",
  'alias': ["runtime"],
  'desc': "Tells runtime/uptime of bot.",
  'category': "misc",
  'filename': __filename
}, async (message) => {
  try {
    message.reply("*_Uptime of " + tlang().title + ": " + runtime(process.uptime()) + '_*');
  } catch (error) {
    await message.error(error + "\n\ncommand : uptime", error, false);
  }
});

// Menu Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'cmdname': "menu",
  'desc': "Help list",
  'type': "general",
  'filename': __filename
}, async (message, match) => {
  try {
    const { commands } = require("../lib");
    
    if (match.split(" ")[0]) {
      let helpText = [];
      const cmd = commands.find(c => c.pattern === match.split(" ")[0].toLowerCase());
      
      if (cmd) {
        helpText.push("*üçÅCommand:* " + cmd.pattern);
        if (cmd.category) helpText.push("*üß©Category:* " + cmd.category);
        if (cmd.alias && cmd.alias[0]) helpText.push("*üß©Alias:* " + cmd.alias.join(", "));
        if (cmd.desc) helpText.push("*üß©Description:* " + cmd.desc);
        if (cmd.use) helpText.push("*„ÄΩÔ∏èUsa:*\n ```" + prefix + cmd.pattern + " " + cmd.use + "```");
        if (cmd.usage) helpText.push("*„ÄΩÔ∏èUsage:*\n ```" + cmd.usage + "```");
        
        await message.reply(helpText.join("\n"));
      }
    }

    let menuStyle = {};
    let menuNum = 0;
    if (Config.menu === '') {
      menuNum = Math.floor(Math.random() * 4) + 1;
    }
    
    if (menuNum == 1 || Config.menu.trim().startsWith('1') || Config.menu.toLowerCase().includes('aztec')) {
      menuStyle = {
        header: "‚îè‚îÅ‚îÅ‚ü™ *" + Config.botname + "* ‚ü´‚îÅ‚îÅ‚¶ø",
        item: "‚îÉ ‚úó",
        footer: "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶ø",
        sectionStart: '‚îå‚îÄ‚îÄ„Äé',
        sectionEnd: "„Äè‚îÄ‚îÄ‚ùñ\n",
        separator: " | ",
        sectionFooter: "\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óâ"
      };
    } else if (menuNum == 2 || Config.menu.trim().startsWith('2') || Config.menu.toLowerCase().includes("a17")) {
      menuStyle = {
        header: "‚îå‚îÄ‚îÄ‚îÄ‚ïê[ *" + Config.botname + "* ]‚ïê‚îÄ‚îÄ‚ñ∏\n‚îÇ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏\n‚î¥‚îÇ‚ñ∏",
        item: "‚¨°‚îÇ‚ñ∏",
        footer: "‚î¨‚îÇ‚ñ∏\n‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏",
        sectionStart: '‚îå‚îÄ‚îÄ‚îÄ‚å©',
        sectionEnd: "‚å™‚îÄ‚îÄ‚îÄ‚óÜ\n‚îÇ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏\n‚î¥‚îÇ‚ñ∏",
        separator: "‚¨°‚îÇ‚ñ∏ ",
        sectionFooter: "‚î¨‚îÇ‚ñ∏\n‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏‚ñ∏\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‚ñ∏"
      };
    } else {
      menuStyle = {
        header: "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ„Ää  " + Config.botname + "  „Äã‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑\n‚îÇ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÅ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ",
        item: "‚îÇ ‚îÇ",
        footer: "‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÅ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ\n‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑",
        sectionStart: '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ùè',
        sectionEnd: '‚ùè',
        separator: '‚îÇ',
        sectionFooter: "‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚îÄ‚ä∑"
      };
    }

    const cmdCategories = {};
    commands.forEach(cmd => {
      if (!cmd.dontAddCommandList && cmd.pattern !== undefined) {
        if (!cmdCategories[cmd.category]) cmdCategories[cmd.category] = [];
        cmdCategories[cmd.category].push(cmd.pattern);
      }
    });

    const time = message.time;
    const date = message.date;
    let menuText = menuStyle.header + "\n" + 
                  menuStyle.item + " Theme:- " + tlang().title + "\n" + 
                  menuStyle.item + " Owner:- " + Config.ownername + "\n" + 
                  menuStyle.item + " Plugins:- " + commands.length + "\n" + 
                  menuStyle.item + " Uptime:- " + runtime(process.uptime()) + "\n" + 
                  menuStyle.item + " Mem:- " + formatp(os.totalmem() - os.freemem()) + '/' + formatp(os.totalmem()) + "\n" + 
                  menuStyle.item + " Time:- " + time + "\n" + 
                  menuStyle.item + " Date:- " + date + "\n" + 
                  menuStyle.footer + "\n\n";

    for (const category in cmdCategories) {
      menuText += menuStyle.sectionStart + " *" + tiny(category) + "* " + menuStyle.sectionEnd + "\n";
      
      if (match.toLowerCase() == category.toLowerCase()) {
        menuText = menuStyle.sectionStart + " *" + tiny(category) + "* " + menuStyle.sectionEnd + "\n";
        cmdCategories[category].forEach(cmd => {
          menuText += menuStyle.separator + " " + fancytext(cmd, 1) + "\n";
        });
        menuText += menuStyle.sectionFooter + "\n";
        break;
      } else {
        cmdCategories[category].forEach(cmd => {
          menuText += menuStyle.separator + " " + fancytext(cmd, 1) + "\n";
        });
        menuText += menuStyle.sectionFooter + "\n";
      }
    }

    menuText += Config.caption;
    let menuOptions = { 'caption': menuText };
    return await message.sendUi(message.chat, menuOptions, message);
  } catch (error) {
    await message.error(error + "\nCommand:menu", error);
  }
});

// List Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "list",
  'desc': "list menu",
  'category': "general",
  'react': 'ü•Ä'
}, async (message) => {
  try {
    const { commands } = require("../lib");
    let listText = `
  ‚ï≠‚îÅ‚îÅ„Äò *${Config.botname}* „Äô‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑     
  ‚îÉ ‚ú≠ Theme: ${tlang().title}
  ‚îÉ ‚ú≠ Prefix: ${prefix}
  ‚îÉ ‚ú≠ Owner: ${Config.ownername}
  ‚îÉ ‚ú≠ Commands: ${commands.length}
  ‚îÉ ‚ú≠ Uptime: ${runtime(process.uptime())}
  ‚îÉ ‚ú≠ Mem: ${formatp(os.totalmem() - os.freemem())}/${formatp(os.totalmem())}
  ‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∑\n`;
    
    commands.forEach((cmd, index) => {
      if (cmd.pattern == undefined) return;
      listText += '*' + (index + 1) + " " + fancytext(cmd.pattern, 1) + "*\n";
      listText += "  " + fancytext(cmd.desc, 1) + "\n";
    });
    
    return await message.sendUi(message.chat, { 'caption': listText + Config.caption });
  } catch (error) {
    await message.error(error + "\nCommand:list", error);
  }
});

// Owner Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.smd({
  'pattern': "owner",
  'desc': "To check ping",
  'category': 'general',
  'filename': __filename
}, async (message) => {
  try {
    const vcard = `BEGIN:VCARD
VERSION:3.0
FN:${Config.ownername}
ORG:;
TEL;type=CELL;type=VOICE;waid=${global.owner?.split(',')[0]}:+${global.owner?.split(',')[0]}
END:VCARD`;
    
    let contactMsg = {
      'contacts': {
        'displayName': Config.ownername,
        'contacts': [{ 'vcard': vcard }]
      },
      'contextInfo': {
        'externalAdReply': {
          'title': Config.ownername,
          'body': "Touch here.",
          'renderLargerThumbnail': true,
          'thumbnailUrl': '',
          'thumbnail': log0,
          'mediaType': 1,
          'mediaUrl': '',
          'sourceUrl': 'https://wa.me/+' + global.owner?.split(',')[0] + '?text=Hii+' + Config.ownername
        }
      }
    };
    
    return await message.sendMessage(message.jid, contactMsg, { 'quoted': message });
  } catch (error) {
    await message.error(error + "\nCommand:owner", error);
  }
});

// Translate Command
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "trt",
  'alias': ["translate"],
  'category': "general",
  'filename': __filename,
  'use': "< text >",
  'desc': "Translate's given text in desird language."
}, async (message, match) => {
  try {
    let langCode = match ? match.split(" ")[0].toLowerCase() : 'en';
    let textToTranslate;
    
    if (!message.reply_text) {
      textToTranslate = match.replace(langCode, '')?.trim() || false;
    } else {
      textToTranslate = message.reply_text;
    }
    
    if (!textToTranslate) {
      return await message.reply("*Please Give Me Text. Example: _" + prefix + "trt en Who are you_*");
    }
    
    var translation = await translatte(textToTranslate, {
      'from': "auto",
      'to': langCode
    });
    
    if ("text" in translation) {
      return await message.reply(translation.text);
    }
  } catch (error) {
    await message.error(error + "\n\ncommand trt", error);
  }
});

// File Command
const readDirectory = (dir) => {
  return new Promise((resolve, reject) => {
    fs.readdir(dir, (err, files) => {
      if (err) reject("Error reading directory");
      else resolve(files);
    });
  });
};

s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': 'file',
  'desc': "to get extact name where that command is in repo.\nSo user can edit that.",
  'category': "general",
  'fromMe': true,
  'filename': __filename
}, async (message, match) => {
  try {
    if (!match) return message.reply("*Uhh PLease, Provide A Command/Directory*");
    
    if (match.startsWith('.')) {
      let dirContents = "*------------- FILE MANAGER -------------*\n";
      try {
        const files = await readDirectory(match);
        files.forEach(file => {
          dirContents += file + "\n";
        });
        await message.reply(dirContents.toString());
      } catch (error) {
        message.reply(error);
      }
      return;
    }
    
    let infoText = [];
    let cmdName = match.split(" ")[0].toLowerCase().trim();
    let cmdObj = events.commands.find(c => c.pattern === cmdName) || 
                events.commands.find(c => c.alias && c.alias.includes(cmdName));
    
    if (!cmdObj) return await message.reply("*‚ùåNo Such commands.*");
    
    infoText.push("*üçÅCommand:* " + cmdObj.pattern);
    if (cmdObj.category) infoText.push("*üß©Type:* " + cmdObj.category);
    if (cmdObj.alias && cmdObj.alias[0]) infoText.push("*üß©Alias:* " + cmdObj.alias.join(", "));
    if (cmdObj.desc) infoText.push("*‚ú®Description:* " + cmdObj.desc);
    if (cmdObj.use) infoText.push("*„ÄΩÔ∏èUsa:*\n ```" + prefix + cmdObj.pattern + " " + cmdObj.use + "```");
    if (cmdObj.usage) infoText.push("*„ÄΩÔ∏èUsage:*\n ```" + cmdObj.usage + "```");
    if (cmdObj.filename) infoText.push("*‚ú®FileName:* " + cmdObj.filename);
    
    try {
      if (match.includes("function") && cmdObj["function"] && message.isSuhail && cmdObj.pattern !== 'file') {
        infoText.push("*üß©Function:* " + cmdObj["function"].toString());
      }
    } catch {}
    
    await message.reply(infoText.join("\n"));
  } catch (error) {
    await message.error(error + "\nCommand:file", error);
  }
});

// Eval Command (Owner Only)
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': "eval",
  'alias': ['$'],
  'category': "owner",
  'filename': __filename,
  'fromMe': true,
  'desc': "Runs js code on node server.",
  'use': "< run code >",
  'dontAddCommandList': true
}, async (message, match, { isCreator, cmdName, Void }) => {
  try {
    if (!match) return message.reply("*Provide A Query To Run Master*");
    
    let result = eval("const a = async()=>{\n" + match + "\n}\na()");
    
    if (typeof result === "object") {
      await message.reply(JSON.stringify(result));
    } else {
      await message.reply(result.toString());
    }
  } catch (error) {
    return await message.reply(error.toString());
  }
});

// Shell Command (Owner Only)
s·¥ú ú·¥Ä…™ ü_·¥ç·¥Ö.cmd({
  'pattern': 'shell',
  'category': "owner",
  'filename': __filename,
  'fromMe': true,
  'desc': "Runs command in Heroku(server) shell.",
  'use': "<shell cmds | ls,cd >",
  'dontAddCommandList': true
}, async (message, match) => {
  try {
    if (!message.isCreator) return message.reply(tlang().owner);
    if (!match) return message.reply("*Uhh PLease, Provide A Command to Run Heroku*");
    
    exec(match, (error, stdout) => {
      if (error) return message.reply("----" + tlang().title + "----\n\n" + error);
      if (stdout) return message.reply('----' + tlang().title + "----\n\n" + stdout);
    });
  } catch (error) {
    await message.error(error + "\n\ncommand shell", error);
  }
});

// Text Handler
smd({
  'on': 'text'
}, async (message, text, { mek, body, args, botNumber, isCreator, icmd, store, budy, Suhail, Void, proto }) => {
  try {
    if (!cronStart) {
      cron.schedule("*/15 * * * *", () => {
        cronStart = true;
        fs.readdir('./temp', (err, files) => {
          if (err) return;
          files.forEach(file => {
            try {
              fs.unlink('./temp/' + file);
            } catch {}
          });
        });
      });
    }
    
    if (!message.reply_message || !text || !message.isPublic) return;
    
    const replyLines = message.reply_message.text.split("\n");
    let lineNum = parseInt(text.split(" ")[0]);
    
    if (!isNaN(lineNum)) {
      if (replyLines.length > 30 && replyLines[1].includes('SUHAIL-MD_FANCY_TEXT')) {
        var selectedLine = replyLines.find(line => line.startsWith(lineNum + " "));
        try {
          if (selectedLine) {
            await message.send(selectedLine.replace('' + lineNum, '').trim(), {}, '', message);
          }
        } catch {}
      }
    }
    
    let menuNum = parseFloat(text.split(" ")[0]);
    if (isNaN(menuNum)) return;
    
    let formattedNum = menuNum.toFixed(1);
    var menuLine = replyLines.find(line => line.startsWith('*' + formattedNum + " "));
    
    if (menuLine && (menuLine.endsWith("COMMANDS*") || menuLine.endsWith("MENU*"))) {
      var category = menuLine.replace('*' + formattedNum, '').replace('|', '')
                            .replace(/COMMANDS\*/gi, '').replace(/MENU\*/gi, '')
                            .toLowerCase();
      
      if (category.length > 0 && category.length < 20) {
        const { commands } = require("../lib");
        const categorizedCmds = {};
        
        commands.forEach(cmd => {
          if (!cmd.dontAddCommandList && cmd.pattern !== undefined) {
            if (!categorizedCmds[cmd.category]) categorizedCmds[cmd.category] = [];
            categorizedCmds[cmd.category].push({
              'command': cmd.pattern,
              'info': cmd.desc,
              'help': prefix + cmd.pattern + " " + (cmd.use ? cmd.use : '')
            });
          }
        });
        
        let categoryText = false;
        for (const cat in categorizedCmds) {
          let catName = '' + cat.toLowerCase();
          if (category.includes(catName)) {
            categoryText = "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚îÉ\t*SUHAIL-MD_" + cat.toUpperCase() + "_COMMANDS*  \n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n";
            
            categorizedCmds[cat].forEach(cmd => {
              categoryText += "*üçÅCommand:* ```" + cmd.command + "``` " + 
                             (cmd.info ? "\n*üß©Info:* ```" + cmd.info + "```" : '') + 
                             "\n*„ÄΩÔ∏èHelp:* ```" + cmd.help + "```\n\n";
            });
            
            categoryText += "\n\n" + Config.caption;
            break;
          }
        }
        
        if (categoryText) {
          return await message.sendUi(message.from, { 'caption': categoryText });
        }
      }
    }
  } catch (error) {
    console.log("ERROR : ", error);
  }
});

// Master Command Handler
smd({
  on: "text"
}, async (message, text, { mek, body, args, botNumber, isCreator, icmd, store, budy, Suhail, Void, proto }) => {
  const { send, reply, react, sendMessage } = message;
  
  if (message.isCreator) {
    if (!Config.HANDLERS.includes('>') && message.text.startsWith('>')) {
      let code = budy.slice(1);
      if (!code) return message.reply("Provide me with a query to run Master!");
      
      try {
        let resultTest = eval(code);
        if (resultTest) return message.reply(util.format(resultTest));
      } catch (error) {
        return message.reply(util.format(error));
      }
    } else if (!Config.HANDLERS.includes('$') && message.text.startsWith('$')) {
      let code = budy.slice(1);
      if (!code) return message.reply("Provide me with a query to run Master!");
      
      try {
        let resultTest = await eval("const a = async()=>{\n" + code + "\n}\na()");
        await message.react('üçÅ');
        if (resultTest) return await message.reply(util.format(resultTest));
      } catch (error) {
        console.log("ERROR FROM RUNNING QUERY WITH MASTER $\n", error);
        return await message.reply(util.format(error));
      }
    }
  }
});