const Suhail_Md = "Suhail MD Whatsapp bot md";
const { groupdb, smd, getBuffer, tlang, prefix, isCreator } = require('../lib');
const Config = require('../config');
const eco = require('discord-mongoose-economy');
const sck = groupdb;
let ty = false;

// Connect to MongoDB if available
try {
    if (isMongodb) { 
        ty = eco.connect(mongodb);
        console.log("Connected with discord economy!!");
    }
} catch(e) { 
    ty = false;
    console.log("Economy connection error:", e);
}

// Economy commands only if connection successful
if(ty) {
    //---------------------------------------------------------------------------
    smd({
        pattern: "daily",
        desc: "Claim daily gold.",
        category: "economy",
        filename: __filename,
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup?.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            if (!message.isGroup) return message.reply(tlang().group);
            
            const daily = await eco.daily(message.sender, "Suhail", 500);
            if (daily.cd) {
                return message.reply(`🧧 You already claimed daily for today, come back in ${daily.cdL}🫡`);
            } else {
                return message.reply(`You claimed daily ${daily.amount} 🪙 for today🎉.`);
            }
        } catch(e) {
            message.error(`${e}\n\ncommand: daily`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "resetwallet",
        desc: "Reset wallet of quoted user.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || await sck.new({id: message.chat});
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            if(!isCreator) return message.reply(tlang().owner);
            
            let user = message.mentionedJid ? message.mentionedJid[0] : 
                      message.msg?.contextInfo?.participant || false;
            if(!user) return message.reply('Please mention a user.');
            
            const balance = await eco.balance(user, "Suhail");
            await eco.deduct(user, "Suhail", balance.wallet);
            return message.reply(
                `⛩️ User: @${user.split('@')[0]} \n *🧧 @${user.split('@')[0]} lost all 🪙 in wallet.*\n_Now live with that poverty.🫡_`,
                { mentions: [user] }
            );
        } catch(e) {
            message.error(`${e}\n\ncommand: resetwallet`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "capacity",
        desc: "Update bank capacity.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || await sck.new({ id: message.chat });
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            if (!message.isGroup) return message.reply(tlang().group);
            if (!match) return message.reply(
                `💴 *Bank-capacity* 💳\n\n` +
                `1 | *1000 sp* = 🪙100\n\n` +
                `2 | *100000 sp* = 🪙1000\n\n` +
                `3 | *10000000 sp* = 🪙10000\n\n` +
                `Example: ${prefix}capacity 1 OR ${prefix}bankupgrade 1000`
            );
            
            let user = message.sender;
            let value = match.trim();
            const balance = await eco.balance(user, "Suhail");
            
            switch (value) {
                case '1000':
                case '1':
                    if (100 > balance.wallet) return message.reply(`*You need 🪙100 to increase bank capacity to 1000 sp*`);
                    await eco.deduct(user, "Suhail", 100);
                    await eco.giveCapacity(user, "Suhail", 1000);
                    return message.reply(`*1000 🪙diamond storage added to your bank*`);
                
                case '100000':
                case '2':
                    if (1000 > balance.wallet) return message.reply(`*You need 🪙1000 to increase bank capacity to 100000 sp*`);
                    await eco.deduct(user, "Suhail", 1000);
                    await eco.giveCapacity(user, "Suhail", 100000);
                    return message.reply(`*100000 🪙diamond storage added to your bank*`);
                
                case '10000000':
                case '3':
                    if (10000 > balance.wallet) return message.reply(`*You need 🪙10000 to increase bank capacity to 10000000 sp*`);
                    await eco.deduct(user, "Suhail", 10000);
                    await eco.giveCapacity(user, "Suhail", 10000000);
                    return message.reply(`*10000000 🪙diamond storage added to your bank*`);
                
                default:
                    return message.reply('*Invalid option*');
            }
        } catch(e) {
            message.error(`${e}\n\ncommand: capacity`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "deposit",
        desc: "Deposit gold to bank.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            if (!match) return message.reply("Please specify the amount to deposit!");
            
            let amount = parseInt(match);
            if (isNaN(amount)) return message.reply("Please provide a valid amount!");
            
            const deposit = await eco.deposit(message.sender, "Suhail", amount);
            if (deposit.noten) return message.reply("You don't have enough money!");
            
            return message.reply(
                `⛩️ Sender: ${message.pushName}\n` +
                `🍀 Successfully deposited 🪙${deposit.amount} to your bank.`
            );
        } catch(e) {
            message.error(`${e}\n\ncommand: deposit`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "lb",
        desc: "Check leaderboard.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message) => {
        try {
            let h = await eco.lb("Suhail", 10);
            let str = `*Top ${h.length} users with most money:*\n`;
            let arr = [];
            
            for(let i = 0; i < h.length; i++) {
                let tname = await message.bot.getName(h[i].userID);
                str += `*${i+1}*\n╭─────────────◆\n` +
                       `│ *Name:* _${tname}_\n` +
                       `│ *User:* _@${h[i].userID.split('@')[0]}_\n` +
                       `│ *Wallet:* _${h[i].wallet}_\n` +
                       `│ *Bank:* _${h[i].bank}_\n` +
                       `│ *Capacity:* _${h[i].bankCapacity}_\n` +
                       `╰─────────────◆\n\n`;
                arr.push(h[i].userID);
            }
            
            await message.reply(str, { mentions: arr });
        } catch(e) {
            message.error(`${e}\n\ncommand: lb`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "transfer",
        desc: "Transfer gold to another user.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            let [amount, user] = match.trim().split(" ");
            if (!amount || !user) return message.reply(`Usage: ${prefix}transfer 100 @user`);
            
            user = message.mentionedJid ? message.mentionedJid[0] : 
                  message.msg?.contextInfo?.participant || false;
            if (!user) return message.reply('Please mention a user.');
            
            amount = parseInt(amount);
            if (isNaN(amount)) return message.reply("Invalid amount!");
            
            const balance = await eco.balance(message.sender, "Suhail");
            if (amount > balance.wallet) return message.reply("Insufficient funds!");
            
            await eco.deduct(message.sender, "Suhail", amount);
            await eco.give(user, "Suhail", amount);
            
            return message.reply(`*Transferred 🪙${amount} successfully*`);
        } catch(e) {
            message.error(`${e}\n\ncommand: transfer`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "wallet",
        desc: "Check wallet balance.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || await sck.new({ id: message.chat });
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            const balance = await eco.balance(message.sender, "Suhail");
            return message.reply(`*👛 ${message.pushName}'s Wallet:*\n\n_🪙${balance.wallet}_`);
        } catch(e) {
            message.error(`${e}\n\ncommand: wallet`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "give",
        desc: "Give money to a user (Owner only).",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            if(!isCreator) return message.reply(`Only bot owner can use this!`);
            
            let [amount, user] = match.trim().split(" ");
            if (!amount || !user) return message.reply(`Usage: ${prefix}give 100 @user`);
            
            user = message.mentionedJid ? message.mentionedJid[0] : 
                  message.msg?.contextInfo?.participant || false;
            if (!user) return message.reply('Please mention a user.');
            
            amount = parseInt(amount);
            if (isNaN(amount)) return message.reply("Invalid amount!");
            
            await eco.give(user, "Suhail", amount);
            return message.reply(
                `Added 🪙${amount} to @${user.split('@')[0]}'s wallet`,
                { mentions: [user] }
            );
        } catch(e) {
            message.error(`${e}\n\ncommand: give`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "bank",
        desc: "Check bank balance.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || await sck.new({ id: message.chat });
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            const balance = await eco.balance(message.sender, "Suhail");
            return message.reply(
                `🍀 User: ${message.pushName}\n\n` +
                `_🪙${balance.bank}/${balance.bankCapacity}_`
            );
        } catch(e) {
            message.error(`${e}\n\ncommand: bank`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "rob",
        desc: "Attempt to rob another user.",
        category: "economy",
        filename: __filename,
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || await sck.new({ id: message.chat });
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            let user = message.mentionedJid ? message.mentionedJid[0] : 
                      message.msg?.contextInfo?.participant || false;
            if (!user) return message.reply('Please mention a user to rob.');
            
            const robber = message.sender;
            const victim = user;
            const riskAmount = 1000;
            
            const robberBalance = await eco.balance(robber, "Suhail");
            const victimBalance = await eco.balance(victim, "Suhail");
            
            if (riskAmount > robberBalance.wallet) return message.reply(`You need 🪙${riskAmount} to attempt robbery!`);
            if (riskAmount > victimBalance.wallet) return message.reply(`Your victim is too poor!`);
            
            const outcomes = ['ran', 'rob', 'caught'];
            const result = outcomes[Math.floor(Math.random() * outcomes.length)];
            
            switch (result) {
                case 'ran':
                    return message.reply(`*Your victim escaped!*`);
                
                case 'rob':
                    const stolen = Math.floor(Math.random() * 1000);
                    await eco.deduct(victim, "Suhail", stolen);
                    await eco.give(robber, "Suhail", stolen);
                    return message.reply(`*You stole 🪙${stolen}!*`);
                
                case 'caught':
                    const fine = Math.floor(Math.random() * 1000);
                    await eco.deduct(robber, "Suhail", fine);
                    return message.reply(`*You were caught and fined 🪙${fine}!*`);
                
                default:
                    return message.reply(`*Robbery attempt failed!*`);
            }
        } catch(e) {
            message.error(`${e}\n\ncommand: rob`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "withdraw",
        desc: "Withdraw money from bank.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            if (!match) return message.reply("*Specify amount to withdraw!*");
            
            const amount = parseInt(match);
            if (isNaN(amount)) return message.reply("Invalid amount!");
            
            const withdraw = await eco.withdraw(message.sender, "Suhail", amount);
            if (withdraw.noten) return message.reply('*Insufficient funds in bank!*');
            
            return message.reply(`*Withdrawn 🪙${withdraw.amount} from your bank*`);
        } catch(e) {
            message.error(`${e}\n\ncommand: withdraw`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "gamble",
        desc: "Gamble your money.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message, match) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            let [amount, direction] = match.trim().split(" ");
            if (!amount || !direction) return message.reply(`Usage: ${prefix}gamble 100 direction(left,right,up,down)`);
            
            amount = parseInt(amount);
            if (isNaN(amount)) return message.reply("Invalid amount!");
            if (amount < 50) return message.reply("*Minimum gamble is 🪙50!*");
            
            const balance = await eco.balance(message.sender, "Suhail");
            if (amount > balance.wallet) return message.reply("*Insufficient funds!*");
            
            const directions = ['up', 'right', 'left', 'down'];
            const result = directions[Math.floor(Math.random() * directions.length)];
            
            if (direction.toLowerCase() === result) {
                const winAmount = amount * 2;
                await eco.give(message.sender, "Suhail", winAmount);
                return message.reply(`*You won 🪙${winAmount}!*`);
            } else {
                await eco.deduct(message.sender, "Suhail", amount);
                return message.reply(`*You lost 🪙${amount}!*`);
            }
        } catch(e) {
            message.error(`${e}\n\ncommand: gamble`, e);
        }
    });

    //---------------------------------------------------------------------------
    smd({
        pattern: "slot",
        desc: "Play slot machine.",
        category: "economy",
        filename: __filename,
        react: "💷"
    }, async(message) => {
        try {
            let zerogroup = await sck.findOne({ id: message.chat }) || {};
            if (zerogroup.economy == "false") return message.reply("*🚦Economy* is not active in current group.");
            
            const minBet = 100;
            const balance = await eco.balance(message.sender, "Suhail");
            if (minBet > balance.wallet) return message.reply(`*You need at least 🪙${minBet} to play!*`);
            
            const symbols = ["🔴", "🔵", "🟣", "🟢", "🟡", "⚪️", "⚫️"];
            const reels = [
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)]
            ];
            
            let result = `🎰 Slot Machine\n\n     ${reels[0]} | ${reels[1]} | ${reels[2]}\n\n`;
            
            if (reels[0] === reels[1] && reels[1] === reels[2]) {
                const winAmount = minBet * 10;
                await eco.give(message.sender, "Suhail", winAmount);
                result += `*JACKPOT! Won 🪙${winAmount}!*`;
            } else if (reels[0] === reels[1] || reels[1] === reels[2] || reels[0] === reels[2]) {
                const winAmount = minBet * 2;
                await eco.give(message.sender, "Suhail", winAmount);
                result += `*Matched 2! Won 🪙${winAmount}!*`;
            } else {
                await eco.deduct(message.sender, "Suhail", minBet);
                result += `*No match! Lost 🪙${minBet}*`;
            }
            
            return message.reply(result);
        } catch(e) {
            message.error(`${e}\n\ncommand: slot`, e);
        }
    });
}