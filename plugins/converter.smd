const axios = require('axios');
const fs = require("fs-extra");
const util = require("util");
const { Sticker, createSticker, StickerTypes } = require("wa-sticker-formatter");
const fetch = require("node-fetch");
const { 
  userdb, 
  tiny, 
  fancytext, 
  smdBuffer, 
  getBuffer, 
  sleep, 
  listall, 
  getRandom, 
  prefix, 
  smd, 
  generateSticker, 
  TelegraPh, 
  Config, 
  tlang 
} = require('../lib/');

// Supported media types
const mediaTypes = ["imageMessage", "videoMessage", "stickerMessage"];
const photoMediaTypes = ["imageMessage", "stickerMessage"];
const audioMediaTypes = ["audioMessage", "videoMessage"];

/**
 * STICKER COMMANDS
 */

// Basic sticker creation
smd({
  cmdname: "sticker",
  alias: ['s'],
  info: "Makes sticker of replied image/video.",
  type: "sticker",
  filename: __filename,
  use: "<reply to any image/video>"
}, async (message) => {
  try {
    const media = mediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (media && mediaTypes.includes(media?.mtype || "need_Media")) {
      const mediaBuffer = await media.download();
      const stickerOptions = {
        pack: Config.packname,
        author: Config.author,
        type: StickerTypes.FULL,
        quality: 10
      };
      
      await generateSticker(message, mediaBuffer, stickerOptions);
      return mediaBuffer = false; // Clean up
    } else {
      return message.reply("*Reply to an image/video to make a sticker!*");
    }
  } catch (error) {
    return message.error(error + "\n\nCommand: sticker\n");
  }
});

// Custom sticker creation
smd({
  cmdname: "take",
  info: "Makes custom sticker from replied sticker.",
  type: "sticker",
  filename: __filename,
  use: "<reply to sticker>"
}, async (message, options) => {
  try {
    const replied = message.reply_message;
    if (!replied || replied?.mtype != "stickerMessage") {
      return message.reply("*Please reply to a sticker*");
    }
    
    const parts = options.split('|');
    const packName = parts[0]?.trim() !== '' ? parts[0] : message.pushName;
    const authorName = parts[1] && parts[1] !== '' ? parts[1] : "sᴜʜᴀɪʟ-ᴍᴅ ♥️";
    
    const stickerBuffer = await replied.download();
    const stickerOptions = {
      pack: packName,
      author: authorName,
      type: StickerTypes.FULL,
      quality: 10
    };
    
    await generateSticker(message, stickerBuffer, stickerOptions);
    return stickerBuffer = false; // Clean up
  } catch (error) {
    return message.error(error + "\n\nCommand: take\n");
  }
});

// Animated text sticker (ATTP)
smd({
  cmdname: "attp",
  info: "Makes animated text sticker.",
  type: "sticker",
  filename: __filename,
  use: "<text>"
}, async (message, text) => {
  try {
    const stickerBuffer = await smdBuffer(
      'https://raganork-api.onrender.com/api/attp?text=' + 
      (text ? text : "Please provide text") + 
      "&apikey=with_love_souravkl11"
    );
    return await generateSticker(message, stickerBuffer);
  } catch (error) {
    return message.error(error + "\n\nCommand: attp\n");
  }
});

// Cropped sticker
smd({
  cmdname: "crop",
  alias: ["cropsticker"],
  info: "Makes cropped sticker of replied image.",
  type: "sticker",
  filename: __filename,
  use: "<reply to image>"
}, async (message) => {
  try {
    const media = mediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (media && mediaTypes.includes(media?.mtype || 'need_Media')) {
      const mediaBuffer = await media.download();
      const stickerOptions = {
        pack: Config.packname,
        author: Config.author,
        type: StickerTypes.CROPPED,
        quality: 50
      };
      
      await generateSticker(message, mediaBuffer, stickerOptions);
      return mediaBuffer = false; // Clean up
    } else {
      return message.reply("*Reply to an image to make a cropped sticker!*");
    }
  } catch (error) {
    return message.error(error + "\n\nCommand: crop\n", "*Failed to create sticker*");
  }
});

// Circle sticker
smd({
  cmdname: 'circle',
  alias: ["circlestic", 'circlesticker', 'cs'],
  info: "Creates circle sticker from image.",
  type: "sticker",
  filename: __filename,
  use: "<reply to image>"
}, async (message) => {
  try {
    const media = mediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (media && mediaTypes.includes(media?.mtype || "need_Media")) {
      const mediaBuffer = await media.download();
      const stickerOptions = {
        pack: Config.packname,
        author: Config.author,
        type: StickerTypes.CIRCLE,
        quality: 50
      };
      
      await generateSticker(message, mediaBuffer, stickerOptions);
      return mediaBuffer = false; // Clean up
    } else {
      return message.reply("*Reply to an image to make a circle sticker!*");
    }
  } catch (error) {
    return message.error(error + "\n\nCommand: circle\n", "*Failed to create sticker*");
  }
});

// Rounded sticker
smd({
  cmdname: "round",
  alias: ["roundstic", "roundsticker"],
  info: "Makes rounded sticker of replied image.",
  type: "sticker",
  filename: __filename,
  use: "<reply to image>"
}, async (message) => {
  try {
    const media = mediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (media && mediaTypes.includes(media?.mtype || "need_Media")) {
      const mediaBuffer = await media.download();
      const stickerOptions = {
        pack: Config.packname,
        author: Config.author,
        type: StickerTypes.ROUNDED,
        quality: 50
      };
      
      await generateSticker(message, mediaBuffer, stickerOptions);
      return mediaBuffer = false; // Clean up
    } else {
      return message.reply("*Reply to an image to make a rounded sticker!*");
    }
  } catch (error) {
    return message.error(error + "\n\nCommand: round\n", "*Failed to create sticker*");
  }
});

// Text-to-picture sticker (TTP)
smd({
  cmdname: 'ttp',
  alias: ["roundstic", 'roundsticker'],
  info: "Creates sticker from text.",
  type: 'sticker',
  filename: __filename,
  use: "<text>"
}, async (message, text) => {
  try {
    const inputText = text || message.reply_text;
    
    if (inputText) {
      const styleNumber = parseInt(inputText) || '';
      
      // Apply fancy text if style number provided
      let processedText = inputText;
      if (styleNumber && !isNaN(styleNumber)) {
        processedText = await fancytext('' + inputText.slice(2), styleNumber);
      }
      
      const { createCanvas } = require("canvas");
      const fs = require('fs');
      const canvas = createCanvas(300, 300);
      const ctx = canvas.getContext('2d');
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.font = "20px Arial";
      ctx.fillStyle = "black";
      ctx.textAlign = "center";
      
      // Split text into multiple lines if needed
      const lines = splitTextIntoLines(processedText, ctx, 280);
      const totalHeight = lines.length * 25;
      const startY = (300 - totalHeight) / 2;
      
      lines.forEach((line, index) => {
        const y = startY + index * 25;
        ctx.fillText(line, 150, y);
      });
      
      const pngStream = canvas.createPNGStream();
      const outputPath = "./temp/ttp.png";
      const out = fs.createWriteStream(outputPath);
      
      pngStream.pipe(out);
      out.on('finish', async () => {
        console.log("Image created:", outputPath);
        const imageBuffer = fs.readFileSync(outputPath);
        const stickerOptions = {
          pack: Config.packname,
          author: Config.author,
          type: StickerTypes.ROUNDED,
          quality: 50
        };
        
        await generateSticker(message, imageBuffer, stickerOptions);
        return imageBuffer = false; // Clean up
      });
    } else {
      return message.reply("*Provide text to create sticker (e.g. .ttp 4 Hello World!)*");
    }
  } catch (error) {
    return message.error(error + "\n\nCommand: ttp\n");
  }
});

// Helper function to split text into multiple lines
function splitTextIntoLines(text, context, maxWidth) {
  const words = text.split(" ");
  const lines = [];
  let currentLine = '';
  
  for (const word of words) {
    const testLine = currentLine === '' ? word : currentLine + " " + word;
    const testWidth = context.measureText(testLine).width;
    
    if (testWidth <= maxWidth) {
      currentLine = testLine;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  }
  
  if (currentLine !== '') {
    lines.push(currentLine);
  }
  
  return lines;
}

/**
 * CONVERTER COMMANDS
 */

// Convert sticker to photo
smd({
  cmdname: 'photo',
  info: "Converts sticker to photo.",
  type: "converter",
  use: "<reply to any sticker>",
  filename: __filename
}, async (message) => {
  try {
    const media = photoMediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (!media || !photoMediaTypes.includes(media?.mtype)) {
      return message.reply("*Reply to a sticker to convert to photo!*");
    }
    
    const tempPath = await message.bot.downloadAndSaveMediaMessage(media);
    await message.bot.sendMessage(message.jid, {
      image: { url: tempPath },
      mimetype: "image/jpeg"
    });
    
    try {
      fs.unlinkSync(tempPath);
    } catch (error) {}
  } catch (error) {
    message.error(error + "\n\nCommand: photo\n", error, false);
  }
});

// Convert video to audio
smd({
  pattern: "toaudio",
  alias: ["mp3", "tomp3"],
  desc: "Converts video to audio.",
  category: "converter",
  use: "<reply to any video>",
  filename: __filename
}, async (message) => {
  try {
    const media = audioMediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (!media || !audioMediaTypes.includes(media?.mtype)) {
      return message.reply("*Reply to a video to convert to audio!*");
    }
    
    const tempPath = await message.bot.downloadAndSaveMediaMessage(media);
    const { toAudio } = require('../lib');
    const audioBuffer = await toAudio(fs.readFileSync(tempPath));
    
    try {
      fs.unlink(tempPath);
    } catch (error) {}
    
    return await message.bot.sendMessage(message.jid, {
      audio: audioBuffer,
      mimetype: "audio/mpeg"
    });
  } catch (error) {
    message.error(error + "\n\nCommand: toaudio", error);
  }
});

// Convert to voice message
smd({
  pattern: "voice",
  alias: ['ptt', "toptt"],
  desc: "Converts audio to voice message.",
  category: "converter",
  use: "<reply to any audio>"
}, async (message) => {
  try {
    const media = audioMediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (!media || !audioMediaTypes.includes(media?.mtype)) {
      return message.reply("*Reply to audio/video to convert to voice message!*");
    }
    
    const audioBuffer = await media.download();
    return await message.bot.sendMessage(message.jid, {
      audio: audioBuffer,
      mimetype: "audio/mpeg",
      ptt: true
    }, { quoted: message });
  } catch (error) {
    message.error(error + "\n\nCommand: voice", error);
  }
});

// Convert sticker to video
smd({
  pattern: "tomp4",
  alias: ["mp4", "tovideo"],
  desc: "Converts sticker to mp4.",
  category: "converter",
  use: "<reply to any animated sticker>",
  filename: __filename
}, async (message) => {
  try {
    const media = message.mtype === 'videoMessage' ? message : message.reply_message;
    
    if (!media) {
      return message.reply("*Reply to an animated sticker or GIF!*");
    }
    
    const { webp2mp4File } = require("../lib");
    const mimetype = media?.mimetype || '';
    
    if (media?.mtype != "videoMessage" && !/webp/.test(mimetype)) {
      return message.send("*Please reply to an animated sticker or GIF*");
    }
    
    let tempPath = await message.bot.downloadAndSaveMediaMessage(media);
    
    try {
      if (/webp/.test(mimetype)) {
        const converted = await webp2mp4File(tempPath);
        tempPath = converted.result;
      }
    } catch (error) {
      console.log("Error converting sticker to mp4\n", error);
    }
    
    await message.bot.sendMessage(message.jid, {
      video: { url: tempPath },
      caption: Config.caption
    });
    
    try {
      await fs.unlink(tempPath);
    } catch (error) {}
  } catch (error) {
    message.error(error + "\n\nCommand: tomp4", error);
  }
});

/**
 * TEXT CONVERSION COMMANDS
 */

// Fancy text generator
smd({
  pattern: "fancy",
  desc: "Generates stylish/fancy text",
  category: 'converter',
  use: "56 Suhail",
  filename: __filename
}, async (message, text) => {
  try {
    let header = "┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃\t*💬SUHAIL-MD_FANCY_TEXT💬* \n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n ";
    header += text ? "```🔢Reply the number you want to select``` \n\n" : 
      "```\t\t" + prefix + "fancy Suhail (For all text)\n\t\t" + 
      prefix + "fancy 25 Suhail (For specific text)```\n\n";
    
    const styleNumber = parseInt(text);
    
    if (isNaN(styleNumber)) {
      const inputText = text ? text : "Suhail";
      const allStyles = listall(inputText);
      
      allStyles.forEach((styledText, index) => {
        header += "\n" + (index + 1) + " " + styledText + "\n";
      });
      
      try {
        return await message.send(header, { caption: header }, '', message);
      } catch {
        return await message.reply(header);
      }
    }
    
    const fancyText = await fancytext('' + text.slice(2), styleNumber);
    return await message.send(fancyText, {}, '', message);
  } catch (error) {
    return message.error(error + "\n\nCommand: fancy", error);
  }
});

// Stylish text generator
smd({
  pattern: 'styly',
  desc: "Generates stylish text variations",
  category: "converter",
  filename: __filename,
  use: '<text|search>'
}, async (message, text) => {
  try {
    const inputText = text.trim();
    let header = "┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃\t*💬SUHAIL-MD_FANCY_TEXT💬* \n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n ";
    header += inputText ? "```🔢Reply the number you want to select``` \n\n" : 
      "```\t\t" + prefix + "styly Suhail (For all text)\n\t\t" + 
      prefix + "styly 19 Suhail (For specific text)```\n\n";
    
    const { styletext } = require("../lib/scraper");
    const styleNumber = inputText ? parseInt(inputText) : '';
    const processedText = styleNumber && !isNaN(styleNumber) ? inputText.slice(2) : inputText;
    
    const styles = (await styletext(processedText ? processedText : "Suhail")) || [];
    
    if (!styles || !styles[0]) {
      return message.send("*No results found!*");
    }
    
    let resultText = '';
    if (isNaN(styleNumber) || styleNumber > styles.length || styleNumber < 0 || !inputText) {
      for (let i = 0; i < styles.length; i++) {
        resultText += "\n" + i + " " + styles[i].result + " " + (inputText.length > 50 ? "\n\n" : '');
      }
      return message.send(header + resultText);
    }
    
    return message.send(styles[styleNumber].result, {}, '', message);
  } catch (error) {
    message.error(error + "\n\nCommand: styly", error);
  }
});

// URL shortener
smd({
  pattern: 'tiny',
  desc: "Shortens URLs",
  category: "converter",
  use: '<url>',
  react: '✅',
  filename: __filename
}, async (message, url) => {
  try {
    if (!url || !url.toLowerCase().includes('https')) {
      return message.reply("Please provide a valid URL");
    }
    
    const shortUrl = await axios.get("https://tinyurl.com/api-create.php?url=" + url.split(" ")[0]);
    message.reply("*Shortened URL*\n\n" + shortUrl.data);
  } catch (error) {
    message.error(error + "\n\nCommand: tiny", error, false);
  }
});

// Text flipper
smd({
  pattern: 'fliptext',
  desc: "Flips given text.",
  category: "converter",
  use: "<text>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply(`*Example: ${prefix}fliptext Suhail MD!*`);
    }
    
    const flippedText = inputText.split('').reverse().join('');
    await message.reply(
      "*「 Text Flipper Tool 」* \n" +
      "*Original text:*\n" + inputText + "\n\n" +
      "*Flipped text:*\n" + flippedText
    );
  } catch (error) {
    message.error(error + "\n\nCommand: fliptext", error);
  }
});

// Binary encoder
smd({
  pattern: "ebinary",
  desc: "Encodes text to binary",
  category: 'converter',
  use: "<text>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply("*Send text to be encoded!*");
    }
    
    const binaryText = inputText.split('').map(char => {
      return char.charCodeAt(0).toString(2);
    }).join(" ");
    
    await message.reply(binaryText);
  } catch (error) {
    await message.error(error + "\n\nCommand: ebinary", error);
  }
});

// Binary decoder
smd({
  pattern: 'dbinary',
  desc: "Decodes binary to text",
  category: "converter",
  use: "<binary>",
  filename: __filename
}, async (message, binary) => {
  try {
    const inputBinary = binary ? binary : message.reply_text;
    
    if (!inputBinary) {
      return message.reply("Send binary to be decoded.");
    }
    
    const binaryArray = inputBinary.split(" ");
    const textArray = [];
    
    for (let i = 0; i < binaryArray.length; i++) {
      textArray.push(String.fromCharCode(parseInt(binaryArray[i], 2)));
    }
    
    await message.reply(textArray.join(''));
  } catch (error) {
    await message.error(error + "\n\nCommand: dbinary", error);
  }
});

// QR code generator
smd({
  pattern: 'qr',
  category: 'converter',
  filename: __filename,
  use: "<text>",
  desc: "Generates QR code for text."
}, async (message, text) => {
  try {
    if (!text) {
      return message.reply("*Provide text to generate QR code!*");
    }
    
    const qrUrl = "https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=" + text;
    await message.bot.sendUi(message.jid, {
      caption: "*Scan QR to get your text*"
    }, {
      quoted: message
    }, "image", qrUrl);
  } catch (error) {
    await message.error(error + "\n\nCommand: qr", error);
  }
});

// Paste to Telegraph
smd({
  pattern: "paste",
  desc: "Creates paste on Telegraph.",
  category: 'converter',
  use: "<text>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    const { data } = await axios.get(
      "https://api.telegra.ph/createPage?access_token=d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722" +
      "&title=Suhail-Md+Bot&author_name=Suhail_Tech_Info" +
      "&content=[{\"tag\":\"p\",\"children\":[\"" + inputText.replace(/ /g, '+') + "\"]}]&return_content=true"
    );
    
    return message.reply(
      "*Paste created on Telegraph*\n" +
      `Title: ${util.format(data.result.title)}\n` +
      `URL: ${util.format(data.result.url)}`
    );
  } catch (error) {
    await message.error(error + "\n\nCommand: paste", error, false);
  }
});

// Meme generator
smd({
  pattern: "memegen",
  desc: "Creates meme from image and text.",
  category: "sticker",
  filename: __filename,
  use: "<text>"
}, async (message, text) => {
  try {
    const media = photoMediaTypes.includes(message.mtype) ? message : message.reply_message;
    
    if (!text) {
      return message.reply("*Please provide text and image*");
    }
    
    if (!media || !photoMediaTypes.includes(media.mtype)) {
      return message.reply("*Reply to an image*");
    }
    
    const [topText, bottomText] = text.split('|');
    const outputType = (text.split('|')[1] || "sticker").toLowerCase();
    const cleanTopText = topText.split(';')[0] || '_';
    const cleanBottomText = topText.split(';')[1] || '_';
    
    const tempPath = await message.bot.downloadAndSaveMediaMessage(media);
    const imageUrl = await TelegraPh(tempPath);
    
    try {
      fs.unlinkSync(tempPath);
    } catch (error) {}
    
    const memeBuffer = await getBuffer(
      "https://api.memegen.link/images/custom/" + 
      cleanTopText + '/' + cleanBottomText + '.png?background=' + imageUrl
    );
    
    if (outputType.startsWith('p')) {
      await message.send(memeBuffer, {
        caption: Config.caption
      }, "image");
    }
    
    const stickerOptions = {
      pack: Config.packname,
      author: Config.author,
      type: StickerTypes.FULL,
      quality: 70
    };
    
    await generateSticker(message, memeBuffer, stickerOptions);
    return memeBuffer = false;
  } catch (error) {
    message.error(error + "\n\nCommand: memegen\n");
    console.log(error);
  }
});

// Emoji mixer
smd({
  pattern: 'emix',
  desc: "Mixes two emojis.",
  category: "sticker",
  use: '<emoji1,emoji2>',
  filename: __filename
}, async (message, emojis) => {
  try {
    const [emoji1, emoji2] = emojis.split(',');
    
    if (!emojis || !emoji1 || !emoji2) {
      return message.reply(`Example: ${prefix}emix 😅,🤔`);
    }
    
    const response = await fetch(
      "https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ" +
      "&contentfilter=high&media_filter=png_transparent&component=proactive" +
      "&collection=emoji_kitchen_v5&q=" + emoji1 + '_' + emoji2
    );
    
    const data = await response?.json();
    
    if (!data || data?.locale == '') {
      return message.send("*Can't create mixture, try other emojis*");
    }
    
    const emojiBuffer = await smdBuffer(data.results[0].url);
    const stickerOptions = {
      pack: Config.packname,
      author: Config.author,
      type: StickerTypes.FULL,
      quality: 70
    };
    
    await generateSticker(message, emojiBuffer, stickerOptions);
    return emojiBuffer = false;
  } catch (error) {
    message.error(error + "\n\nCommand: emix");
  }
});

// Quote sticker creator
smd({
  pattern: "quotely",
  desc: "Creates sticker of quoted text.",
  alias: ['q'],
  category: "sticker",
  use: "<reply to any message>",
  filename: __filename
}, async (message, options) => {
  try {
    const quoted = message.reply_message ? message.reply_message : 
                 (message && options ? message : false);
    
    const quotedText = message.reply_message ? message.reply_message.text : options;
    
    if (!quoted || !quotedText) {
      return message.reply("*Please quote/reply to any message!*");
    }
    
    const senderProfilePic = await message.getpp(quoted.sender);
    const colors = ["#FFFFFF", "#000000"];
    const bgColor = options === 'white' ? colors[0] : 
                   options === "black" ? colors[1] : 
                   colors[Math.floor(Math.random() * colors.length)];
    
    const senderName = message.bot.getName(quoted.sender);
    
    const quoteData = {
      type: "quote",
      format: "png",
      backgroundColor: bgColor,
      width: 512,
      height: 512,
      scale: 3,
      messages: [{
        avatar: true,
        from: {
          first_name: senderName,
          language_code: 'en',
          name: senderName,
          photo: {
            url: senderProfilePic
          }
        },
        text: quotedText,
        replyMessage: {}
      }]
    };
    
    const response = await axios.post('https://bot.lyo.su/quote/generate', quoteData);
    
    if (!response || response.status !== 200 || !response.data || !response.data.ok) {
      return message.send("*Can't create quote sticker!*");
    }
    
    const stickerBuffer = Buffer.alloc(
      response.data.result.image.length, 
      response.data.result.image, 
      "base64"
    );
    
    try {
      await message.send(stickerBuffer, {
        packname: Config.packname,
        author: 'Suhail-Md'
      }, "sticker");
    } catch (error) {
      console.log("Error in quotely:", error);
      const stickerOptions = {
        pack: Config.packname,
        author: Config.author,
        type: StickerTypes.FULL,
        quality: 70
      };
      return await generateSticker(message, stickerBuffer, stickerOptions);
    }
  } catch (error) {
    return await message.error(error + "\n\nCommand: quotely", error);
  }
});

// Random wallpaper
smd({
  cmdname: "wallpaper",
  info: "Gets random wallpaper.",
  type: "Anime Pics",
  filename: __filename
}, async (message) => {
  try {
    const response = await (await fetch(
      "https://api.unsplash.com/photos/random?client_id=72utkjatCBC-PDcx7-Kcvgod7-QOFAm2fXwEeW8b8cc"
    ))?.json();
    
    const imageUrl = response?.urls?.regular || false;
    
    if (imageUrl) {
      await message.sendUi(message.jid, {
        caption: "*--- Random Wallpaper ---*"
      }, {
        quoted: message
      }, "image", imageUrl);
    } else {
      await message.send("*Failed to fetch wallpaper!*");
    }
  } catch (error) {
    return await message.error(error + "\n\nCommand: wallpaper\n");
  }
});
/**
 * BASE64 ENCODE/DECODE COMMANDS
 */

// Base64 encode
smd({
  pattern: "base64",
  alias: ["b64", "encode64"],
  desc: "Encodes text to Base64",
  category: "converter",
  use: "<text>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply("*Please provide text to encode!*\nExample: " + prefix + "base64 Hello World");
    }
    
    const encodedText = Buffer.from(inputText).toString('base64');
    await message.reply("*Base64 Encoded:*\n```" + encodedText + "```");
  } catch (error) {
    await message.error(error + "\n\nCommand: base64", error);
  }
});

// Base64 decode
smd({
  pattern: "unbase64",
  alias: ["ub64", "decode64"],
  desc: "Decodes Base64 to text",
  category: "converter",
  use: "<base64>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply("*Please provide Base64 to decode!*\nExample: " + prefix + "unbase64 SGVsbG8gV29ybGQ=");
    }
    
    const decodedText = Buffer.from(inputText, 'base64').toString('utf-8');
    await message.reply("*Base64 Decoded:*\n```" + decodedText + "```");
  } catch (error) {
    await message.error(error + "\n\nCommand: unbase64", error);
  }
});

/**
 * BASE32 ENCODE/DECODE COMMANDS
 */

// Base32 encode
smd({
  pattern: "base32",
  alias: ["b32", "encode32"],
  desc: "Encodes text to Base32",
  category: "converter",
  use: "<text>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply("*Please provide text to encode!*\nExample: " + prefix + "base32 Hello World");
    }
    
    // Using base32-encode package (you'll need to install it)
    const { encode } = require('base32-encode');
    const encodedText = encode(Buffer.from(inputText), 'RFC3548');
    await message.reply("*Base32 Encoded:*\n```" + encodedText + "```");
  } catch (error) {
    await message.error(error + "\n\nCommand: base32", error);
  }
});

// Base32 decode
smd({
  pattern: "unbase32",
  alias: ["ub32", "decode32"],
  desc: "Decodes Base32 to text",
  category: "converter",
  use: "<base32>",
  filename: __filename
}, async (message, text) => {
  try {
    const inputText = text ? text : message.reply_text;
    
    if (!inputText) {
      return message.reply("*Please provide Base32 to decode!*\nExample: " + prefix + "unbase32 JBSWY3DPEBLW64TMMQ======");
    }
    
    // Using base32-decode package (you'll need to install it)
    const { decode } = require('base32-decode');
    const decodedBuffer = decode(inputText, 'RFC3548');
    const decodedText = Buffer.from(decodedBuffer).toString('utf-8');
    await message.reply("*Base32 Decoded:*\n```" + decodedText + "```");
  } catch (error) {
    await message.error(error + "\n\nCommand: unbase32", error);
  }
});