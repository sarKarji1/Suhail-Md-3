const {
  plugins,
  isUrl,
  smd,
  tlang,
  Config,
  smdJson,
  smdBuffer
} = require("../lib");

// Restart Command
smd({
  'cmdname': "restart",
  'info': "To restart bot",
  'type': "tools",
  'fromMe': true,
  'filename': __filename
}, async (message) => {
  const { exec } = require("child_process");
  message.reply("Restarting");
  exec("pm2 restart all");
});

// List Plugins Command
smd({
  'cmdname': "listplugin",
  'type': "owner",
  'info': "Shows list of all external modules",
  'filename': __filename,
  'use': "<name>"
}, async (message) => {
  try {
    // Get plugin list from GitHub
    let pluginData = await smdJson('https://raw.githubusercontent.com/SuhailTechInfo/Suhail-Md-Media/main/plugins/listPlugin.json');
    
    // Main plugins
    if (pluginData && pluginData.result && pluginData.result[0]) {
      let pluginList = '';
      for (let i = 0; i < pluginData.result.length; i++) {
        pluginList += `${pluginData.result[i].name}: _${pluginData.result[i].url}_\n\n`;
      }
      
      // Get image for context
      let pluginImage = await smdBuffer("https://telegra.ph/file/2fa8e0e24eea3f363d5f6.jpg");
      var contextInfo = {
        ...(await message.bot.contextInfo(
          "ꜱᴜʜᴀɪʟ-ᴍᴅ", 
          "Pʟᴜɢɪɴꜱ", 
          pluginImage ? pluginImage : log0, 
          1, 
          gurl, 
          '1'
        ))
      };
      
      await message.reply(pluginList, {
        'contextInfo': contextInfo
      });
    }
    
    // External modules
    if (pluginData && pluginData.external && pluginData.external[0]) {
      let externalList = '';
      let externalImage = await smdBuffer("https://telegra.ph/file/369a41986ee5c49db251d.jpg");
      var contextInfo = {
        ...(await message.bot.contextInfo(
          "ꜱᴜʜᴀɪʟ-ᴍᴅ", 
          "ᴇxᴛᴇʀɴᴀʟ ᴍᴏᴅᴜʟᴇ", 
          externalImage ? externalImage : log0, 
          1, 
          gurl, 
          '1'
        ))
      };
      
      for (let i = 0; i < pluginData.external.length; i++) {
        externalList += `${pluginData.external[i].name}: _${pluginData.external[i].url}_\n\n`;
      }
      
      await message.reply(externalList, {
        'contextInfo': contextInfo
      });
    }
  } catch (error) {
    message.error(`${error} \n\ncmdName listplugin`, error);
  }
});

// Installed Plugins Command
smd({
  'cmdname': "plugins",
  'alias': ["plugin"],
  'type': 'owner',
  'info': "Shows list of all externally installed modules",
  'fromMe': true,
  'filename': __filename,
  'use': "<name>"
}, async (message, pluginName) => {
  try {
    let pluginList = await plugins(message, "plugins", pluginName);
    return await message.send(
      !pluginList 
        ? `*_There's no plugin install in ${Config.botname}_*` 
        : !pluginName 
          ? "*All Installed Modules are:-*\n\n" + pluginList 
          : pluginList
    );
  } catch (error) {
    message.error(`${error} \n\ncmdName plugins\n`);
  }
});

// Remove Plugin Command
smd({
  'pattern': "remove",
  'alias': ["uninstall"],
  'type': "owner",
  'info': "removes external modules.",
  'fromMe': true,
  'filename': __filename,
  'use': "<plugin name>"
}, async (message, pluginName) => {
  if (!pluginName) {
    return await message.reply("*_Uhh Please, Provide Me Plugin Name_*");
  }
  
  if (pluginName === "alls") {
    return await message.reply(await plugins("remove", 'all', __dirname));
  }
  
  try {
    await message.send(
      await plugins(message, 'remove', pluginName, __dirname), 
      {}, 
      '', 
      message
    );
  } catch (error) {
    // Handle error silently
  }
});

// Install Plugin Command
smd({
  'cmdname': "install",
  'type': "owner",
  'info': "Installs external modules..",
  'fromMe': true,
  'filename': __filename,
  'use': "<gist url>"
}, async (message, pluginUrl) => {
  let url = pluginUrl 
    ? pluginUrl 
    : message.quoted 
      ? message.quoted.text 
      : '';
      
  if (!url.toLowerCase().includes("https")) {
    return await message.send("*_Uhh Please, Provide Me Plugin Url_*");
  }
  
  await message.reply(await plugins(message, "install", url, __dirname));
});