const { smd, fetchJson, Config, getBuffer } = require('../lib'); // Make sure getBuffer is imported

const FB_APIS = [
  {
    name: 'Fastest',
    url: (videoUrl) => `https://apidl.asepharyana.cloud/api/downloader/fbdl?url=${encodeURIComponent(videoUrl)}`,
    processor: async (data) => {
      if (!data?.status || !data.data) throw new Error('Invalid response from Fastest API');
      return {
        sd: data.data.find(item => item.resolution.includes('SD'))?.url,
        hd: data.data.find(item => item.resolution.includes('HD') || item.resolution.includes('1080p'))?.url,
        thumb: data.data[0]?.thumbnail
      };
    }
  },
  {
    name: 'Faster',
    url: (videoUrl) => `https://bk9.fun/download/fb?url=${encodeURIComponent(videoUrl)}`,
    processor: async (data) => {
      if (!data?.status || !data.BK9) throw new Error('Invalid response from Faster API');
      return {
        sd: data.BK9.sd,
        hd: data.BK9.hd,
        thumb: data.BK9.thumb
      };
    }
  },
  {
    name: 'Fast',
    url: (videoUrl) => `https://api-aswin-sparky.koyeb.app/api/downloader/fbdl?url=${encodeURIComponent(videoUrl)}`,
    processor: async (data) => {
      if (!data?.status || !data.data) throw new Error('Invalid response from Fast API');
      return {
        sd: data.data.low,
        hd: data.data.high,
        thumb: data.data.thumbnail
      };
    }
  }
];

smd({
  'pattern': 'fb2',
  'alias': ['facebook2', 'fbdl2'],
  'desc': 'Download Facebook videos',
  'category': 'downloader',
  'filename': __filename,
  'use': '<facebook video url>'
}, async (message, query) => {
  try {
    if (!query) return message.reply('Please provide a Facebook video URL\nExample: .fb https://www.facebook.com/...');

    const fbUrl = query.split(' ')[0].trim();
    if (!fbUrl.includes('facebook.com')) {
      return message.reply('Invalid Facebook URL! Please provide a valid Facebook video link');
    }

    let result = null;
    let lastError = null;

    // Try all APIs in sequence
    for (const api of FB_APIS) {
      try {
        const apiUrl = api.url(fbUrl);
        const response = await fetchJson(apiUrl);
        result = await api.processor(response);
        
        if (result.hd || result.sd) break; // Success if we got at least one quality
      } catch (error) {
        lastError = error;
        continue; // Try next API
      }
    }

    if (!result || (!result.hd && !result.sd)) {
      throw lastError || new Error('All APIs failed to fetch the video');
    }

    const videoUrl = result.hd || result.sd;
    await message.reply(`*Facebook Video Downloader*\n\nQuality: ${result.hd ? 'HD' : 'SD'}\n\nDownloading...`);

    // Get video buffer
    const videoBuffer = await getBuffer(videoUrl).catch(() => null);
    if (!videoBuffer) {
      throw new Error('Failed to fetch video content');
    }

    // Prepare thumbnail (if available)
    let thumbBuffer = null;
    if (result.thumb) {
      try {
        thumbBuffer = await getBuffer(result.thumb);
      } catch {
        // Ignore thumbnail error
      }
    }

    await message.send(message.jid, {
      video: videoBuffer,
      caption: Config.caption || "Powered By Bandaheali",
      thumbnail: thumbBuffer
    }, {
      quoted: message
    });

  } catch (error) {
    await message.error(`Failed to download Facebook video\nError: ${error.message}`, error, "Facebook Download Error");
  }
});
