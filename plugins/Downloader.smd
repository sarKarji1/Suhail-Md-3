const {
  smd,
  tlang,
  prefix,
  Config,
  sleep,
  getBuffer,
  smdJson,
  smdBuffer
} = require('../lib');

const axios = require('axios');
const yts = require('yt-search');
const mega = require('megajs');
const mime = require('mime-types'); // ✅ Fix for mime issue

// VIDEO COMMAND
smd({
  cmdname: "video",
  alias: ["ytv", "ytvideo"],
  desc: "Play YouTube video using yt-search and download via API",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();
    if (!text) return m.reply("*🎬 Provide a video name to search!*\nExample: `.video tu hai kahan`");

    const search = await yts(text);
    const video = search.videos[0];
    if (!video) return m.reply("❌ No video found for that query.");

    const api = `https://exonity.tech/api/ytdl-download?url=${encodeURIComponent(video.url)}&type=video`;
    const res = await axios.get(api);
    const json = res.data;

    if (!json.status || !json.data?.url)
      return m.reply("❌ Failed to fetch video. Try again.");

    const { title, uploader, duration, thumbnail, url } = json.data;
    const caption = `🎞️ *${title}*\n👤 Uploader: ${uploader}\n⏱ Duration: ${duration}`;

    await m.send(url, { caption, thumbnail }, "video", m);
  } catch (e) {
    m.error(`${e}\n\nCommand: video2`, e, false);
  }
});

// AUDIO COMMAND
smd({
  cmdname: "play",
  alias: ["yta", "ytaudio"],
  desc: "Play YouTube audio using yt-search and download via API",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();
    if (!text) return m.reply("*🔍 Provide a song name to search!*\nExample: `.play tu hai kahan`");

    const search = await yts(text);
    const video = search.videos[0];
    if (!video) return m.reply("❌ No video found for that query.");

    const api = `https://exonity.tech/api/ytdl-download?url=${encodeURIComponent(video.url)}&type=audio`;
    const res = await axios.get(api);
    const json = res.data;

    if (!json.status || !json.data?.url)
      return m.reply("❌ Failed to download audio.");

    const { title, uploader, duration, thumbnail, url } = json.data;
    const caption = `🎶 *${title}*\n👤 Uploader: ${uploader}\n⏱ Duration: ${duration}`;

    await m.send(url, { caption, thumbnail }, "audio", m);
  } catch (e) {
    m.error(`${e}\n\nCommand: play2`, e, false);
  }
});

// TIKTOK COMMAND
smd({
  cmdname: "tiktok",
  alias: ["tik", "tt"],
  desc: "Download TikTok video without watermark",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();
    if (!text && m.quoted?.body) text = m.quoted.body;
    if (!text || !text.includes("tiktok.com"))
      return m.reply("*🌀 Provide a valid TikTok video URL!*\n\nExample:\n.tik https://vt.tiktok.com/ZSB5Dc6YX/");

    const response = await axios.get(`https://delirius-apiofc.vercel.app/download/tiktok?url=${encodeURIComponent(text)}`);
    const json = response.data;

    if (!json.status || !json?.data?.meta?.media?.[0]?.org)
      return m.reply("❌ *Failed to fetch video. Please try another link.*");

    const videoUrl = json.data.meta.media[0].org;
    const title = json.data.title || "TikTok Video";
    const author = json.data.author?.nickname || json.data.author?.username || "Unknown";
    const caption = `🎬 *${title}*\n👤 By: ${author}`;

    await m.send(videoUrl, { caption }, "video", m);
  } catch (e) {
    m.error(`${e}\n\nCommand: tik2`, e, false);
  }
});
//FACEBOOK

smd({
  cmdname: "facebook",
  alias: ["fb", "fbdl"],
  desc: "Download Facebook video using direct link",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();

    // Check for reply message if no text
    if (!text && m.quoted?.body) text = m.quoted.body;

    if (!text || (!text.includes("facebook.com") && !text.includes("fb.watch"))) {
      return m.reply("*📘 Provide a valid Facebook video URL!*\n\nExample:\n.fb https://www.facebook.com/share/r/17FQTQ8qVw/");
    }

    const api = `https://apidl.asepharyana.cloud/api/downloader/fbdl?url=${encodeURIComponent(text)}`;
    const res = await axios.get(api);
    const json = res.data;

    if (!json.status || !Array.isArray(json.data) || !json.data[0]?.url) {
      return m.reply("❌ Failed to fetch Facebook video. Try another link.");
    }

    const videoInfo = json.data[0]; // First available video
    const videoUrl = videoInfo.url;
    const resolution = videoInfo.resolution || "Unknown Quality";
    const thumbnail = videoInfo.thumbnail;

    const caption = `🎬 *Facebook Video*\n📥 Resolution: ${resolution}`;

    await m.send(videoUrl, { caption, thumbnail }, "video", m);

  } catch (e) {
    m.error(`${e}\n\nCommand: fb`, e, false);
  }
});

// MEGA.NZ COMMAND
smd({
  cmdname: "mega",
  alias: ["megadl", "megadownload"],
  desc: "Download files from Mega.nz links",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();
    if (!text && m.quoted?.body) text = m.quoted.body;

    if (!text || !text.match(/mega(\.nz|\.io)/i))
      return m.reply("*📦 Provide a valid Mega.nz link!*\n\nExample:\n.mega https://mega.nz/file/abc123#xyz456");

    const file = await mega.File.fromURL(text).loadAttributes();
    if (!file) return m.reply("❌ Failed to access file. Check if link is valid.");

    const fileName = file.name;
    const fileSize = (file.size / (1024 * 1024)).toFixed(2) + ' MB';
    const fileType = file.name.split('.').pop().toUpperCase();

    const downloadStream = file.download();
    const chunks = [];

    downloadStream.on('data', chunk => chunks.push(chunk));

    await new Promise((resolve, reject) => {
      downloadStream.on('end', resolve);
      downloadStream.on('error', reject);
    });

    const fileBuffer = Buffer.concat(chunks);
    const caption = `📦 *Mega Download*\n\n🗂️ File: ${fileName}\n📊 Size: ${fileSize}\n📝 Type: ${fileType}`;

    await m.send(
      fileBuffer, 
      { 
        filename: fileName,
        caption: caption,
        mimetype: mime.lookup(fileName) || 'application/octet-stream'
      }, 
      "document", 
      m
    );
  } catch (e) {
    m.error(`${e}\n\nCommand: mega`, e, false);
    await m.reply(`❌ Error: ${e.message || "Failed to download file"}`);
  }
});
//ytmp4 downloader

smd({
  cmdname: "ytmp4",
  alias: ["ytv"],
  desc: "Download YouTube video via direct URL",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();

    // Try reply text if no URL given
    if (!text && m.quoted?.body) text = m.quoted.body;

    if (!text || !text.includes("youtube.com") && !text.includes("youtu.be")) {
      return m.reply("*📺 Provide a valid YouTube video URL!*\n\nExample:\n.ytmp4 https://youtube.com/watch?v=A7NDb0iDZd0");
    }

    const api = `https://exonity.tech/api/ytdl-download?url=${encodeURIComponent(text)}&type=video`;

    const res = await axios.get(api);
    const json = res.data;

    if (!json.status || !json.data?.url) {
      return m.reply("❌ Failed to fetch video. Try another link.");
    }

    const { title, uploader, duration, thumbnail, url } = json.data;
    const caption = `🎞️ *${title}*\n👤 Uploader: ${uploader}\n⏱ Duration: ${duration}`;

    await m.send(url, { caption, thumbnail }, "video", m);

  } catch (e) {
    m.error(`${e}\n\nCommand: ytmp4`, e, false);
  }
});

// Ytmp3 command 
smd({
  cmdname: "ytmp3",
  alias: ["yta"],
  desc: "Download YouTube video via direct URL",
  type: "downloader",
  filename: __filename,
},
async (m) => {
  try {
    let text = m.body.split(" ").slice(1).join(" ").trim();

    // Try reply text if no URL given
    if (!text && m.quoted?.body) text = m.quoted.body;

    if (!text || !text.includes("youtube.com") && !text.includes("youtu.be")) {
      return m.reply("*📺 Provide a valid YouTube video URL!*\n\nExample:\n.ytmp3 https://youtube.com/watch?v=A7NDb0iDZd0");
    }

    const api = `https://exonity.tech/api/ytdl-download?url=${encodeURIComponent(text)}&type=audio`;

    const res = await axios.get(api);
    const json = res.data;

    if (!json.status || !json.data?.url) {
      return m.reply("❌ Failed to fetch video. Try another link.");
    }

    const { title, uploader, duration, thumbnail, url } = json.data;
    const caption = `🎞️ *${title}*\n👤 Uploader: ${uploader}\n⏱ Duration: ${duration}`;

    await m.send(url, { caption, thumbnail }, "audio", m);

  } catch (e) {
    m.error(`${e}\n\nCommand: ytmp3`, e, false);
  }
});
